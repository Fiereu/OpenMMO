/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.Server.ServerPath;
import de.fiereu.openmmo.db.jooq.tables.ServerPermission.ServerPermissionPath;
import de.fiereu.openmmo.db.jooq.tables.User.UserPath;
import de.fiereu.openmmo.db.jooq.tables.UserPermission.UserPermissionPath;
import de.fiereu.openmmo.db.jooq.tables.records.PermissionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Permissions extends TableImpl<PermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.permissions</code>
     */
    public static final Permissions PERMISSIONS = new Permissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PermissionsRecord> getRecordType() {
        return PermissionsRecord.class;
    }

    /**
     * The column <code>public.permissions.id</code>.
     */
    public final TableField<PermissionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.permissions.name</code>.
     */
    public final TableField<PermissionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    private Permissions(Name alias, Table<PermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Permissions(Name alias, Table<PermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.permissions</code> table reference
     */
    public Permissions(String alias) {
        this(DSL.name(alias), PERMISSIONS);
    }

    /**
     * Create an aliased <code>public.permissions</code> table reference
     */
    public Permissions(Name alias) {
        this(alias, PERMISSIONS);
    }

    /**
     * Create a <code>public.permissions</code> table reference
     */
    public Permissions() {
        this(DSL.name("permissions"), null);
    }

    public <O extends Record> Permissions(Table<O> path, ForeignKey<O, PermissionsRecord> childPath, InverseForeignKey<O, PermissionsRecord> parentPath) {
        super(path, childPath, parentPath, PERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PermissionsPath extends Permissions implements Path<PermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PermissionsPath(Table<O> path, ForeignKey<O, PermissionsRecord> childPath, InverseForeignKey<O, PermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PermissionsPath(Name alias, Table<PermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PermissionsPath as(String alias) {
            return new PermissionsPath(DSL.name(alias), this);
        }

        @Override
        public PermissionsPath as(Name alias) {
            return new PermissionsPath(alias, this);
        }

        @Override
        public PermissionsPath as(Table<?> alias) {
            return new PermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PermissionsRecord, Integer> getIdentity() {
        return (Identity<PermissionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PermissionsRecord> getPrimaryKey() {
        return Keys.PERMISSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<PermissionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PERMISSIONS_NAME_KEY);
    }

    private transient ServerPermissionPath _serverPermission;

    /**
     * Get the implicit to-many join path to the
     * <code>public.server_permission</code> table
     */
    public ServerPermissionPath serverPermission() {
        if (_serverPermission == null)
            _serverPermission = new ServerPermissionPath(this, null, Keys.SERVER_PERMISSION__SERVER_PERMISSION_PERMISSION_ID_FKEY.getInverseKey());

        return _serverPermission;
    }

    private transient UserPermissionPath _userPermission;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_permission</code> table
     */
    public UserPermissionPath userPermission() {
        if (_userPermission == null)
            _userPermission = new UserPermissionPath(this, null, Keys.USER_PERMISSION__USER_PERMISSION_PERMISSION_ID_FKEY.getInverseKey());

        return _userPermission;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.server</code>
     * table
     */
    public ServerPath server() {
        return serverPermission().server();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.user</code>
     * table
     */
    public UserPath user() {
        return userPermission().user();
    }

    @Override
    public Permissions as(String alias) {
        return new Permissions(DSL.name(alias), this);
    }

    @Override
    public Permissions as(Name alias) {
        return new Permissions(alias, this);
    }

    @Override
    public Permissions as(Table<?> alias) {
        return new Permissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(String name) {
        return new Permissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(Name name) {
        return new Permissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Permissions rename(Table<?> name) {
        return new Permissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Condition condition) {
        return new Permissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Permissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Permissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
