/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.Permissions.PermissionsPath;
import de.fiereu.openmmo.db.jooq.tables.ServerNode.ServerNodePath;
import de.fiereu.openmmo.db.jooq.tables.ServerPermission.ServerPermissionPath;
import de.fiereu.openmmo.db.jooq.tables.ServerToken.ServerTokenPath;
import de.fiereu.openmmo.db.jooq.tables.records.ServerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Server extends TableImpl<ServerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.server</code>
     */
    public static final Server SERVER = new Server();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerRecord> getRecordType() {
        return ServerRecord.class;
    }

    /**
     * The column <code>public.server.id</code>.
     */
    public final TableField<ServerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.server.type</code>.
     */
    public final TableField<ServerRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(4).nullable(false), this, "");

    /**
     * The column <code>public.server.name</code>.
     */
    public final TableField<ServerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.server.port</code>.
     */
    public final TableField<ServerRecord, Integer> PORT = createField(DSL.name("port"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.server.created_at</code>.
     */
    public final TableField<ServerRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Server(Name alias, Table<ServerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Server(Name alias, Table<ServerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.server</code> table reference
     */
    public Server(String alias) {
        this(DSL.name(alias), SERVER);
    }

    /**
     * Create an aliased <code>public.server</code> table reference
     */
    public Server(Name alias) {
        this(alias, SERVER);
    }

    /**
     * Create a <code>public.server</code> table reference
     */
    public Server() {
        this(DSL.name("server"), null);
    }

    public <O extends Record> Server(Table<O> path, ForeignKey<O, ServerRecord> childPath, InverseForeignKey<O, ServerRecord> parentPath) {
        super(path, childPath, parentPath, SERVER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServerPath extends Server implements Path<ServerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServerPath(Table<O> path, ForeignKey<O, ServerRecord> childPath, InverseForeignKey<O, ServerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServerPath(Name alias, Table<ServerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServerPath as(String alias) {
            return new ServerPath(DSL.name(alias), this);
        }

        @Override
        public ServerPath as(Name alias) {
            return new ServerPath(alias, this);
        }

        @Override
        public ServerPath as(Table<?> alias) {
            return new ServerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ServerRecord, Integer> getIdentity() {
        return (Identity<ServerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServerRecord> getPrimaryKey() {
        return Keys.SERVER_PKEY;
    }

    @Override
    public List<UniqueKey<ServerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SERVER_NAME_KEY);
    }

    private transient ServerNodePath _serverNode;

    /**
     * Get the implicit to-many join path to the <code>public.server_node</code>
     * table
     */
    public ServerNodePath serverNode() {
        if (_serverNode == null)
            _serverNode = new ServerNodePath(this, null, Keys.SERVER_NODE__SERVER_NODE_SERVER_ID_FKEY.getInverseKey());

        return _serverNode;
    }

    private transient ServerPermissionPath _serverPermission;

    /**
     * Get the implicit to-many join path to the
     * <code>public.server_permission</code> table
     */
    public ServerPermissionPath serverPermission() {
        if (_serverPermission == null)
            _serverPermission = new ServerPermissionPath(this, null, Keys.SERVER_PERMISSION__SERVER_PERMISSION_SERVER_ID_FKEY.getInverseKey());

        return _serverPermission;
    }

    private transient ServerTokenPath _serverToken;

    /**
     * Get the implicit to-many join path to the
     * <code>public.server_token</code> table
     */
    public ServerTokenPath serverToken() {
        if (_serverToken == null)
            _serverToken = new ServerTokenPath(this, null, Keys.SERVER_TOKEN__SERVER_TOKEN_SERVER_ID_FKEY.getInverseKey());

        return _serverToken;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.permissions</code> table
     */
    public PermissionsPath permissions() {
        return serverPermission().permissions();
    }

    @Override
    public Server as(String alias) {
        return new Server(DSL.name(alias), this);
    }

    @Override
    public Server as(Name alias) {
        return new Server(alias, this);
    }

    @Override
    public Server as(Table<?> alias) {
        return new Server(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(String name) {
        return new Server(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(Name name) {
        return new Server(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Server rename(Table<?> name) {
        return new Server(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Server where(Condition condition) {
        return new Server(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Server where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Server where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Server where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Server where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Server where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Server where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Server where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Server whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Server whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
