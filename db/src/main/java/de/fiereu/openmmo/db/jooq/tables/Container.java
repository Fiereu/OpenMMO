/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.Pokemon.PokemonPath;
import de.fiereu.openmmo.db.jooq.tables.records.ContainerRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Container extends TableImpl<ContainerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.container</code>
     */
    public static final Container CONTAINER = new Container();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContainerRecord> getRecordType() {
        return ContainerRecord.class;
    }

    /**
     * The column <code>public.container.id</code>.
     */
    public final TableField<ContainerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.container.name</code>.
     */
    public final TableField<ContainerRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.container.size</code>.
     */
    public final TableField<ContainerRecord, Integer> SIZE = createField(DSL.name("size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.container.required</code>.
     */
    public final TableField<ContainerRecord, Boolean> REQUIRED = createField(DSL.name("required"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Container(Name alias, Table<ContainerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Container(Name alias, Table<ContainerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.container</code> table reference
     */
    public Container(String alias) {
        this(DSL.name(alias), CONTAINER);
    }

    /**
     * Create an aliased <code>public.container</code> table reference
     */
    public Container(Name alias) {
        this(alias, CONTAINER);
    }

    /**
     * Create a <code>public.container</code> table reference
     */
    public Container() {
        this(DSL.name("container"), null);
    }

    public <O extends Record> Container(Table<O> path, ForeignKey<O, ContainerRecord> childPath, InverseForeignKey<O, ContainerRecord> parentPath) {
        super(path, childPath, parentPath, CONTAINER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContainerPath extends Container implements Path<ContainerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ContainerPath(Table<O> path, ForeignKey<O, ContainerRecord> childPath, InverseForeignKey<O, ContainerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContainerPath(Name alias, Table<ContainerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContainerPath as(String alias) {
            return new ContainerPath(DSL.name(alias), this);
        }

        @Override
        public ContainerPath as(Name alias) {
            return new ContainerPath(alias, this);
        }

        @Override
        public ContainerPath as(Table<?> alias) {
            return new ContainerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ContainerRecord, Integer> getIdentity() {
        return (Identity<ContainerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContainerRecord> getPrimaryKey() {
        return Keys.CONTAINER_PKEY;
    }

    @Override
    public List<UniqueKey<ContainerRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONTAINER_NAME_KEY);
    }

    private transient PokemonPath _pokemon;

    /**
     * Get the implicit to-many join path to the <code>public.pokemon</code>
     * table
     */
    public PokemonPath pokemon() {
        if (_pokemon == null)
            _pokemon = new PokemonPath(this, null, Keys.POKEMON__POKEMON_CONTAINER_ID_FKEY.getInverseKey());

        return _pokemon;
    }

    @Override
    public Container as(String alias) {
        return new Container(DSL.name(alias), this);
    }

    @Override
    public Container as(Name alias) {
        return new Container(alias, this);
    }

    @Override
    public Container as(Table<?> alias) {
        return new Container(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Container rename(String name) {
        return new Container(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Container rename(Name name) {
        return new Container(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Container rename(Table<?> name) {
        return new Container(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Container where(Condition condition) {
        return new Container(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Container where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Container where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Container where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Container where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Container where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Container where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Container where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Container whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Container whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
