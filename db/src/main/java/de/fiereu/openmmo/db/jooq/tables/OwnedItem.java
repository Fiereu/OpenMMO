/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.Character.CharacterPath;
import de.fiereu.openmmo.db.jooq.tables.Inventory.InventoryPath;
import de.fiereu.openmmo.db.jooq.tables.Item.ItemPath;
import de.fiereu.openmmo.db.jooq.tables.records.OwnedItemRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OwnedItem extends TableImpl<OwnedItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.owned_item</code>
     */
    public static final OwnedItem OWNED_ITEM = new OwnedItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnedItemRecord> getRecordType() {
        return OwnedItemRecord.class;
    }

    /**
     * The column <code>public.owned_item.item_id</code>.
     */
    public final TableField<OwnedItemRecord, Integer> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.owned_item.owner_id</code>.
     */
    public final TableField<OwnedItemRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.owned_item.inventory_id</code>.
     */
    public final TableField<OwnedItemRecord, Integer> INVENTORY_ID = createField(DSL.name("inventory_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.owned_item.amount</code>.
     */
    public final TableField<OwnedItemRecord, Integer> AMOUNT = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "");

    private OwnedItem(Name alias, Table<OwnedItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OwnedItem(Name alias, Table<OwnedItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.owned_item</code> table reference
     */
    public OwnedItem(String alias) {
        this(DSL.name(alias), OWNED_ITEM);
    }

    /**
     * Create an aliased <code>public.owned_item</code> table reference
     */
    public OwnedItem(Name alias) {
        this(alias, OWNED_ITEM);
    }

    /**
     * Create a <code>public.owned_item</code> table reference
     */
    public OwnedItem() {
        this(DSL.name("owned_item"), null);
    }

    public <O extends Record> OwnedItem(Table<O> path, ForeignKey<O, OwnedItemRecord> childPath, InverseForeignKey<O, OwnedItemRecord> parentPath) {
        super(path, childPath, parentPath, OWNED_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OwnedItemPath extends OwnedItem implements Path<OwnedItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OwnedItemPath(Table<O> path, ForeignKey<O, OwnedItemRecord> childPath, InverseForeignKey<O, OwnedItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OwnedItemPath(Name alias, Table<OwnedItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OwnedItemPath as(String alias) {
            return new OwnedItemPath(DSL.name(alias), this);
        }

        @Override
        public OwnedItemPath as(Name alias) {
            return new OwnedItemPath(alias, this);
        }

        @Override
        public OwnedItemPath as(Table<?> alias) {
            return new OwnedItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<OwnedItemRecord> getPrimaryKey() {
        return Keys.ITEM_OWNED_PK;
    }

    @Override
    public List<ForeignKey<OwnedItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OWNED_ITEM__OWNED_ITEM_ITEM_ID_FKEY, Keys.OWNED_ITEM__OWNED_ITEM_OWNER_ID_FKEY, Keys.OWNED_ITEM__OWNED_ITEM_INVENTORY_ID_FKEY);
    }

    private transient ItemPath _item;

    /**
     * Get the implicit join path to the <code>public.item</code> table.
     */
    public ItemPath item() {
        if (_item == null)
            _item = new ItemPath(this, Keys.OWNED_ITEM__OWNED_ITEM_ITEM_ID_FKEY, null);

        return _item;
    }

    private transient CharacterPath _character;

    /**
     * Get the implicit join path to the <code>public.character</code> table.
     */
    public CharacterPath character() {
        if (_character == null)
            _character = new CharacterPath(this, Keys.OWNED_ITEM__OWNED_ITEM_OWNER_ID_FKEY, null);

        return _character;
    }

    private transient InventoryPath _inventory;

    /**
     * Get the implicit join path to the <code>public.inventory</code> table.
     */
    public InventoryPath inventory() {
        if (_inventory == null)
            _inventory = new InventoryPath(this, Keys.OWNED_ITEM__OWNED_ITEM_INVENTORY_ID_FKEY, null);

        return _inventory;
    }

    @Override
    public OwnedItem as(String alias) {
        return new OwnedItem(DSL.name(alias), this);
    }

    @Override
    public OwnedItem as(Name alias) {
        return new OwnedItem(alias, this);
    }

    @Override
    public OwnedItem as(Table<?> alias) {
        return new OwnedItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnedItem rename(String name) {
        return new OwnedItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnedItem rename(Name name) {
        return new OwnedItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnedItem rename(Table<?> name) {
        return new OwnedItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OwnedItem where(Condition condition) {
        return new OwnedItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OwnedItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OwnedItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OwnedItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OwnedItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OwnedItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OwnedItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OwnedItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OwnedItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OwnedItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
