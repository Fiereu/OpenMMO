/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.Character.CharacterPath;
import de.fiereu.openmmo.db.jooq.tables.Container.ContainerPath;
import de.fiereu.openmmo.db.jooq.tables.records.PokemonRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Pokemon extends TableImpl<PokemonRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pokemon</code>
     */
    public static final Pokemon POKEMON = new Pokemon();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PokemonRecord> getRecordType() {
        return PokemonRecord.class;
    }

    /**
     * The column <code>public.pokemon.id</code>.
     */
    public final TableField<PokemonRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.pokemon.trainer_id</code>.
     */
    public final TableField<PokemonRecord, Integer> TRAINER_ID = createField(DSL.name("trainer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.container_id</code>.
     */
    public final TableField<PokemonRecord, Integer> CONTAINER_ID = createField(DSL.name("container_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.container_position</code>.
     */
    public final TableField<PokemonRecord, Integer> CONTAINER_POSITION = createField(DSL.name("container_position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.dex_id</code>.
     */
    public final TableField<PokemonRecord, Integer> DEX_ID = createField(DSL.name("dex_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.original_trainer_id</code>.
     */
    public final TableField<PokemonRecord, Integer> ORIGINAL_TRAINER_ID = createField(DSL.name("original_trainer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.caught_at</code>.
     */
    public final TableField<PokemonRecord, LocalDateTime> CAUGHT_AT = createField(DSL.name("caught_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.pokemon.name</code>.
     */
    public final TableField<PokemonRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.pokemon.seed</code>.
     */
    public final TableField<PokemonRecord, Integer> SEED = createField(DSL.name("seed"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("(((random() * (((2147483647)::bigint - ('-2147483648'::integer)::bigint))::double precision) + (('-2147483648'::integer)::bigint)::double precision))::integer"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.pokemon.level</code>.
     */
    public final TableField<PokemonRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.moves</code>.
     */
    public final TableField<PokemonRecord, Integer[]> MOVES = createField(DSL.name("moves"), SQLDataType.INTEGER.nullable(false).array(), this, "");

    /**
     * The column <code>public.pokemon.moves_pp</code>.
     */
    public final TableField<PokemonRecord, Integer[]> MOVES_PP = createField(DSL.name("moves_pp"), SQLDataType.INTEGER.nullable(false).array(), this, "");

    /**
     * The column <code>public.pokemon.ev_hp</code>.
     */
    public final TableField<PokemonRecord, Integer> EV_HP = createField(DSL.name("ev_hp"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.ev_attack</code>.
     */
    public final TableField<PokemonRecord, Integer> EV_ATTACK = createField(DSL.name("ev_attack"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.ev_defense</code>.
     */
    public final TableField<PokemonRecord, Integer> EV_DEFENSE = createField(DSL.name("ev_defense"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.ev_special_attack</code>.
     */
    public final TableField<PokemonRecord, Integer> EV_SPECIAL_ATTACK = createField(DSL.name("ev_special_attack"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.ev_special_defense</code>.
     */
    public final TableField<PokemonRecord, Integer> EV_SPECIAL_DEFENSE = createField(DSL.name("ev_special_defense"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.ev_speed</code>.
     */
    public final TableField<PokemonRecord, Integer> EV_SPEED = createField(DSL.name("ev_speed"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.iv_hp</code>.
     */
    public final TableField<PokemonRecord, Integer> IV_HP = createField(DSL.name("iv_hp"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.iv_attack</code>.
     */
    public final TableField<PokemonRecord, Integer> IV_ATTACK = createField(DSL.name("iv_attack"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.iv_defense</code>.
     */
    public final TableField<PokemonRecord, Integer> IV_DEFENSE = createField(DSL.name("iv_defense"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.iv_special_attack</code>.
     */
    public final TableField<PokemonRecord, Integer> IV_SPECIAL_ATTACK = createField(DSL.name("iv_special_attack"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.iv_special_defense</code>.
     */
    public final TableField<PokemonRecord, Integer> IV_SPECIAL_DEFENSE = createField(DSL.name("iv_special_defense"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.iv_speed</code>.
     */
    public final TableField<PokemonRecord, Integer> IV_SPEED = createField(DSL.name("iv_speed"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pokemon.is_shiny</code>.
     */
    public final TableField<PokemonRecord, Boolean> IS_SHINY = createField(DSL.name("is_shiny"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.pokemon.has_hidden_ability</code>.
     */
    public final TableField<PokemonRecord, Boolean> HAS_HIDDEN_ABILITY = createField(DSL.name("has_hidden_ability"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.pokemon.is_alpha</code>.
     */
    public final TableField<PokemonRecord, Boolean> IS_ALPHA = createField(DSL.name("is_alpha"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.pokemon.is_secret</code>.
     */
    public final TableField<PokemonRecord, Boolean> IS_SECRET = createField(DSL.name("is_secret"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.pokemon.created_at</code>.
     */
    public final TableField<PokemonRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Pokemon(Name alias, Table<PokemonRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Pokemon(Name alias, Table<PokemonRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pokemon</code> table reference
     */
    public Pokemon(String alias) {
        this(DSL.name(alias), POKEMON);
    }

    /**
     * Create an aliased <code>public.pokemon</code> table reference
     */
    public Pokemon(Name alias) {
        this(alias, POKEMON);
    }

    /**
     * Create a <code>public.pokemon</code> table reference
     */
    public Pokemon() {
        this(DSL.name("pokemon"), null);
    }

    public <O extends Record> Pokemon(Table<O> path, ForeignKey<O, PokemonRecord> childPath, InverseForeignKey<O, PokemonRecord> parentPath) {
        super(path, childPath, parentPath, POKEMON);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PokemonPath extends Pokemon implements Path<PokemonRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PokemonPath(Table<O> path, ForeignKey<O, PokemonRecord> childPath, InverseForeignKey<O, PokemonRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PokemonPath(Name alias, Table<PokemonRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PokemonPath as(String alias) {
            return new PokemonPath(DSL.name(alias), this);
        }

        @Override
        public PokemonPath as(Name alias) {
            return new PokemonPath(alias, this);
        }

        @Override
        public PokemonPath as(Table<?> alias) {
            return new PokemonPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PokemonRecord, Integer> getIdentity() {
        return (Identity<PokemonRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PokemonRecord> getPrimaryKey() {
        return Keys.POKEMON_PKEY;
    }

    @Override
    public List<ForeignKey<PokemonRecord, ?>> getReferences() {
        return Arrays.asList(Keys.POKEMON__POKEMON_TRAINER_ID_FKEY, Keys.POKEMON__POKEMON_CONTAINER_ID_FKEY, Keys.POKEMON__POKEMON_ORIGINAL_TRAINER_ID_FKEY);
    }

    private transient CharacterPath _pokemonTrainerIdFkey;

    /**
     * Get the implicit join path to the <code>public.character</code> table,
     * via the <code>pokemon_trainer_id_fkey</code> key.
     */
    public CharacterPath pokemonTrainerIdFkey() {
        if (_pokemonTrainerIdFkey == null)
            _pokemonTrainerIdFkey = new CharacterPath(this, Keys.POKEMON__POKEMON_TRAINER_ID_FKEY, null);

        return _pokemonTrainerIdFkey;
    }

    private transient ContainerPath _container;

    /**
     * Get the implicit join path to the <code>public.container</code> table.
     */
    public ContainerPath container() {
        if (_container == null)
            _container = new ContainerPath(this, Keys.POKEMON__POKEMON_CONTAINER_ID_FKEY, null);

        return _container;
    }

    private transient CharacterPath _pokemonOriginalTrainerIdFkey;

    /**
     * Get the implicit join path to the <code>public.character</code> table,
     * via the <code>pokemon_original_trainer_id_fkey</code> key.
     */
    public CharacterPath pokemonOriginalTrainerIdFkey() {
        if (_pokemonOriginalTrainerIdFkey == null)
            _pokemonOriginalTrainerIdFkey = new CharacterPath(this, Keys.POKEMON__POKEMON_ORIGINAL_TRAINER_ID_FKEY, null);

        return _pokemonOriginalTrainerIdFkey;
    }

    @Override
    public Pokemon as(String alias) {
        return new Pokemon(DSL.name(alias), this);
    }

    @Override
    public Pokemon as(Name alias) {
        return new Pokemon(alias, this);
    }

    @Override
    public Pokemon as(Table<?> alias) {
        return new Pokemon(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(String name) {
        return new Pokemon(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(Name name) {
        return new Pokemon(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pokemon rename(Table<?> name) {
        return new Pokemon(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pokemon where(Condition condition) {
        return new Pokemon(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pokemon where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pokemon where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pokemon where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pokemon where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pokemon where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pokemon where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Pokemon where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pokemon whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Pokemon whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
