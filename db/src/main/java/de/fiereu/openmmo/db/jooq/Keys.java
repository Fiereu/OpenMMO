/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq;


import de.fiereu.openmmo.db.jooq.tables.Character;
import de.fiereu.openmmo.db.jooq.tables.Container;
import de.fiereu.openmmo.db.jooq.tables.Inventory;
import de.fiereu.openmmo.db.jooq.tables.Item;
import de.fiereu.openmmo.db.jooq.tables.OwnedItem;
import de.fiereu.openmmo.db.jooq.tables.Permissions;
import de.fiereu.openmmo.db.jooq.tables.Pokemon;
import de.fiereu.openmmo.db.jooq.tables.Server;
import de.fiereu.openmmo.db.jooq.tables.ServerNode;
import de.fiereu.openmmo.db.jooq.tables.ServerPermission;
import de.fiereu.openmmo.db.jooq.tables.ServerToken;
import de.fiereu.openmmo.db.jooq.tables.User;
import de.fiereu.openmmo.db.jooq.tables.UserPermission;
import de.fiereu.openmmo.db.jooq.tables.records.CharacterRecord;
import de.fiereu.openmmo.db.jooq.tables.records.ContainerRecord;
import de.fiereu.openmmo.db.jooq.tables.records.InventoryRecord;
import de.fiereu.openmmo.db.jooq.tables.records.ItemRecord;
import de.fiereu.openmmo.db.jooq.tables.records.OwnedItemRecord;
import de.fiereu.openmmo.db.jooq.tables.records.PermissionsRecord;
import de.fiereu.openmmo.db.jooq.tables.records.PokemonRecord;
import de.fiereu.openmmo.db.jooq.tables.records.ServerNodeRecord;
import de.fiereu.openmmo.db.jooq.tables.records.ServerPermissionRecord;
import de.fiereu.openmmo.db.jooq.tables.records.ServerRecord;
import de.fiereu.openmmo.db.jooq.tables.records.ServerTokenRecord;
import de.fiereu.openmmo.db.jooq.tables.records.UserPermissionRecord;
import de.fiereu.openmmo.db.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CharacterRecord> CHARACTER_PKEY = Internal.createUniqueKey(Character.CHARACTER, DSL.name("character_pkey"), new TableField[] { Character.CHARACTER.ID }, true);
    public static final UniqueKey<ContainerRecord> CONTAINER_NAME_KEY = Internal.createUniqueKey(Container.CONTAINER, DSL.name("container_name_key"), new TableField[] { Container.CONTAINER.NAME }, true);
    public static final UniqueKey<ContainerRecord> CONTAINER_PKEY = Internal.createUniqueKey(Container.CONTAINER, DSL.name("container_pkey"), new TableField[] { Container.CONTAINER.ID }, true);
    public static final UniqueKey<InventoryRecord> INVENTORY_NAME_KEY = Internal.createUniqueKey(Inventory.INVENTORY, DSL.name("inventory_name_key"), new TableField[] { Inventory.INVENTORY.NAME }, true);
    public static final UniqueKey<InventoryRecord> INVENTORY_PKEY = Internal.createUniqueKey(Inventory.INVENTORY, DSL.name("inventory_pkey"), new TableField[] { Inventory.INVENTORY.ID }, true);
    public static final UniqueKey<ItemRecord> ITEM_NAME_KEY = Internal.createUniqueKey(Item.ITEM, DSL.name("item_name_key"), new TableField[] { Item.ITEM.NAME }, true);
    public static final UniqueKey<ItemRecord> ITEM_PKEY = Internal.createUniqueKey(Item.ITEM, DSL.name("item_pkey"), new TableField[] { Item.ITEM.ID }, true);
    public static final UniqueKey<OwnedItemRecord> ITEM_OWNED_PK = Internal.createUniqueKey(OwnedItem.OWNED_ITEM, DSL.name("item_owned_pk"), new TableField[] { OwnedItem.OWNED_ITEM.ITEM_ID, OwnedItem.OWNED_ITEM.OWNER_ID, OwnedItem.OWNED_ITEM.INVENTORY_ID }, true);
    public static final UniqueKey<PermissionsRecord> PERMISSIONS_NAME_KEY = Internal.createUniqueKey(Permissions.PERMISSIONS, DSL.name("permissions_name_key"), new TableField[] { Permissions.PERMISSIONS.NAME }, true);
    public static final UniqueKey<PermissionsRecord> PERMISSIONS_PKEY = Internal.createUniqueKey(Permissions.PERMISSIONS, DSL.name("permissions_pkey"), new TableField[] { Permissions.PERMISSIONS.ID }, true);
    public static final UniqueKey<PokemonRecord> POKEMON_PKEY = Internal.createUniqueKey(Pokemon.POKEMON, DSL.name("pokemon_pkey"), new TableField[] { Pokemon.POKEMON.ID }, true);
    public static final UniqueKey<ServerRecord> SERVER_NAME_KEY = Internal.createUniqueKey(Server.SERVER, DSL.name("server_name_key"), new TableField[] { Server.SERVER.NAME }, true);
    public static final UniqueKey<ServerRecord> SERVER_PKEY = Internal.createUniqueKey(Server.SERVER, DSL.name("server_pkey"), new TableField[] { Server.SERVER.ID }, true);
    public static final UniqueKey<ServerNodeRecord> SERVER_NODE_IPV6_IPV4_PORT_KEY = Internal.createUniqueKey(ServerNode.SERVER_NODE, DSL.name("server_node_ipv6_ipv4_port_key"), new TableField[] { ServerNode.SERVER_NODE.IPV6, ServerNode.SERVER_NODE.IPV4, ServerNode.SERVER_NODE.PORT }, true);
    public static final UniqueKey<ServerNodeRecord> SERVER_NODE_PKEY = Internal.createUniqueKey(ServerNode.SERVER_NODE, DSL.name("server_node_pkey"), new TableField[] { ServerNode.SERVER_NODE.ID }, true);
    public static final UniqueKey<ServerPermissionRecord> SERVER_PERMISSION_PKEY = Internal.createUniqueKey(ServerPermission.SERVER_PERMISSION, DSL.name("server_permission_pkey"), new TableField[] { ServerPermission.SERVER_PERMISSION.SERVER_ID, ServerPermission.SERVER_PERMISSION.PERMISSION_ID }, true);
    public static final UniqueKey<ServerTokenRecord> SERVER_TOKEN_PKEY = Internal.createUniqueKey(ServerToken.SERVER_TOKEN, DSL.name("server_token_pkey"), new TableField[] { ServerToken.SERVER_TOKEN.ID }, true);
    public static final UniqueKey<ServerTokenRecord> SERVER_TOKEN_TOKEN_SERVER_ID_KEY = Internal.createUniqueKey(ServerToken.SERVER_TOKEN, DSL.name("server_token_token_server_id_key"), new TableField[] { ServerToken.SERVER_TOKEN.TOKEN, ServerToken.SERVER_TOKEN.SERVER_ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> USER_USERNAME_KEY = Internal.createUniqueKey(User.USER, DSL.name("user_username_key"), new TableField[] { User.USER.USERNAME }, true);
    public static final UniqueKey<UserPermissionRecord> USER_PERMISSION_PKEY = Internal.createUniqueKey(UserPermission.USER_PERMISSION, DSL.name("user_permission_pkey"), new TableField[] { UserPermission.USER_PERMISSION.USER_ID, UserPermission.USER_PERMISSION.PERMISSION_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<CharacterRecord, UserRecord> CHARACTER__CHARACTER_USER_ID_FKEY = Internal.createForeignKey(Character.CHARACTER, DSL.name("character_user_id_fkey"), new TableField[] { Character.CHARACTER.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<OwnedItemRecord, InventoryRecord> OWNED_ITEM__OWNED_ITEM_INVENTORY_ID_FKEY = Internal.createForeignKey(OwnedItem.OWNED_ITEM, DSL.name("owned_item_inventory_id_fkey"), new TableField[] { OwnedItem.OWNED_ITEM.INVENTORY_ID }, Keys.INVENTORY_PKEY, new TableField[] { Inventory.INVENTORY.ID }, true);
    public static final ForeignKey<OwnedItemRecord, ItemRecord> OWNED_ITEM__OWNED_ITEM_ITEM_ID_FKEY = Internal.createForeignKey(OwnedItem.OWNED_ITEM, DSL.name("owned_item_item_id_fkey"), new TableField[] { OwnedItem.OWNED_ITEM.ITEM_ID }, Keys.ITEM_PKEY, new TableField[] { Item.ITEM.ID }, true);
    public static final ForeignKey<OwnedItemRecord, CharacterRecord> OWNED_ITEM__OWNED_ITEM_OWNER_ID_FKEY = Internal.createForeignKey(OwnedItem.OWNED_ITEM, DSL.name("owned_item_owner_id_fkey"), new TableField[] { OwnedItem.OWNED_ITEM.OWNER_ID }, Keys.CHARACTER_PKEY, new TableField[] { Character.CHARACTER.ID }, true);
    public static final ForeignKey<PokemonRecord, ContainerRecord> POKEMON__POKEMON_CONTAINER_ID_FKEY = Internal.createForeignKey(Pokemon.POKEMON, DSL.name("pokemon_container_id_fkey"), new TableField[] { Pokemon.POKEMON.CONTAINER_ID }, Keys.CONTAINER_PKEY, new TableField[] { Container.CONTAINER.ID }, true);
    public static final ForeignKey<PokemonRecord, CharacterRecord> POKEMON__POKEMON_ORIGINAL_TRAINER_ID_FKEY = Internal.createForeignKey(Pokemon.POKEMON, DSL.name("pokemon_original_trainer_id_fkey"), new TableField[] { Pokemon.POKEMON.ORIGINAL_TRAINER_ID }, Keys.CHARACTER_PKEY, new TableField[] { Character.CHARACTER.ID }, true);
    public static final ForeignKey<PokemonRecord, CharacterRecord> POKEMON__POKEMON_TRAINER_ID_FKEY = Internal.createForeignKey(Pokemon.POKEMON, DSL.name("pokemon_trainer_id_fkey"), new TableField[] { Pokemon.POKEMON.TRAINER_ID }, Keys.CHARACTER_PKEY, new TableField[] { Character.CHARACTER.ID }, true);
    public static final ForeignKey<ServerNodeRecord, ServerRecord> SERVER_NODE__SERVER_NODE_SERVER_ID_FKEY = Internal.createForeignKey(ServerNode.SERVER_NODE, DSL.name("server_node_server_id_fkey"), new TableField[] { ServerNode.SERVER_NODE.SERVER_ID }, Keys.SERVER_PKEY, new TableField[] { Server.SERVER.ID }, true);
    public static final ForeignKey<ServerPermissionRecord, PermissionsRecord> SERVER_PERMISSION__SERVER_PERMISSION_PERMISSION_ID_FKEY = Internal.createForeignKey(ServerPermission.SERVER_PERMISSION, DSL.name("server_permission_permission_id_fkey"), new TableField[] { ServerPermission.SERVER_PERMISSION.PERMISSION_ID }, Keys.PERMISSIONS_PKEY, new TableField[] { Permissions.PERMISSIONS.ID }, true);
    public static final ForeignKey<ServerPermissionRecord, ServerRecord> SERVER_PERMISSION__SERVER_PERMISSION_SERVER_ID_FKEY = Internal.createForeignKey(ServerPermission.SERVER_PERMISSION, DSL.name("server_permission_server_id_fkey"), new TableField[] { ServerPermission.SERVER_PERMISSION.SERVER_ID }, Keys.SERVER_PKEY, new TableField[] { Server.SERVER.ID }, true);
    public static final ForeignKey<ServerTokenRecord, ServerRecord> SERVER_TOKEN__SERVER_TOKEN_SERVER_ID_FKEY = Internal.createForeignKey(ServerToken.SERVER_TOKEN, DSL.name("server_token_server_id_fkey"), new TableField[] { ServerToken.SERVER_TOKEN.SERVER_ID }, Keys.SERVER_PKEY, new TableField[] { Server.SERVER.ID }, true);
    public static final ForeignKey<ServerTokenRecord, UserRecord> SERVER_TOKEN__SERVER_TOKEN_USER_ID_FKEY = Internal.createForeignKey(ServerToken.SERVER_TOKEN, DSL.name("server_token_user_id_fkey"), new TableField[] { ServerToken.SERVER_TOKEN.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<UserPermissionRecord, PermissionsRecord> USER_PERMISSION__USER_PERMISSION_PERMISSION_ID_FKEY = Internal.createForeignKey(UserPermission.USER_PERMISSION, DSL.name("user_permission_permission_id_fkey"), new TableField[] { UserPermission.USER_PERMISSION.PERMISSION_ID }, Keys.PERMISSIONS_PKEY, new TableField[] { Permissions.PERMISSIONS.ID }, true);
    public static final ForeignKey<UserPermissionRecord, UserRecord> USER_PERMISSION__USER_PERMISSION_USER_ID_FKEY = Internal.createForeignKey(UserPermission.USER_PERMISSION, DSL.name("user_permission_user_id_fkey"), new TableField[] { UserPermission.USER_PERMISSION.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
}
