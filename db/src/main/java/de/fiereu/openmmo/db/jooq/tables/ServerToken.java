/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.Server.ServerPath;
import de.fiereu.openmmo.db.jooq.tables.User.UserPath;
import de.fiereu.openmmo.db.jooq.tables.records.ServerTokenRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.postgres.extensions.bindings.InetBinding;
import org.jooq.postgres.extensions.types.Inet;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ServerToken extends TableImpl<ServerTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.server_token</code>
     */
    public static final ServerToken SERVER_TOKEN = new ServerToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerTokenRecord> getRecordType() {
        return ServerTokenRecord.class;
    }

    /**
     * The column <code>public.server_token.id</code>.
     */
    public final TableField<ServerTokenRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.server_token.server_id</code>.
     */
    public final TableField<ServerTokenRecord, Integer> SERVER_ID = createField(DSL.name("server_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.server_token.user_id</code>.
     */
    public final TableField<ServerTokenRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.server_token.user_ip</code>.
     */
    public final TableField<ServerTokenRecord, Inet> USER_IP = createField(DSL.name("user_ip"), DefaultDataType.getDefaultDataType("\"pg_catalog\".\"inet\"").nullable(false), this, "", new InetBinding());

    /**
     * The column <code>public.server_token.token</code>.
     */
    public final TableField<ServerTokenRecord, UUID> TOKEN = createField(DSL.name("token"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.server_token.created_at</code>.
     */
    public final TableField<ServerTokenRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private ServerToken(Name alias, Table<ServerTokenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ServerToken(Name alias, Table<ServerTokenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.server_token</code> table reference
     */
    public ServerToken(String alias) {
        this(DSL.name(alias), SERVER_TOKEN);
    }

    /**
     * Create an aliased <code>public.server_token</code> table reference
     */
    public ServerToken(Name alias) {
        this(alias, SERVER_TOKEN);
    }

    /**
     * Create a <code>public.server_token</code> table reference
     */
    public ServerToken() {
        this(DSL.name("server_token"), null);
    }

    public <O extends Record> ServerToken(Table<O> path, ForeignKey<O, ServerTokenRecord> childPath, InverseForeignKey<O, ServerTokenRecord> parentPath) {
        super(path, childPath, parentPath, SERVER_TOKEN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ServerTokenPath extends ServerToken implements Path<ServerTokenRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ServerTokenPath(Table<O> path, ForeignKey<O, ServerTokenRecord> childPath, InverseForeignKey<O, ServerTokenRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ServerTokenPath(Name alias, Table<ServerTokenRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ServerTokenPath as(String alias) {
            return new ServerTokenPath(DSL.name(alias), this);
        }

        @Override
        public ServerTokenPath as(Name alias) {
            return new ServerTokenPath(alias, this);
        }

        @Override
        public ServerTokenPath as(Table<?> alias) {
            return new ServerTokenPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ServerTokenRecord, Integer> getIdentity() {
        return (Identity<ServerTokenRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServerTokenRecord> getPrimaryKey() {
        return Keys.SERVER_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<ServerTokenRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SERVER_TOKEN_TOKEN_SERVER_ID_KEY);
    }

    @Override
    public List<ForeignKey<ServerTokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SERVER_TOKEN__SERVER_TOKEN_SERVER_ID_FKEY, Keys.SERVER_TOKEN__SERVER_TOKEN_USER_ID_FKEY);
    }

    private transient ServerPath _server;

    /**
     * Get the implicit join path to the <code>public.server</code> table.
     */
    public ServerPath server() {
        if (_server == null)
            _server = new ServerPath(this, Keys.SERVER_TOKEN__SERVER_TOKEN_SERVER_ID_FKEY, null);

        return _server;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.SERVER_TOKEN__SERVER_TOKEN_USER_ID_FKEY, null);

        return _user;
    }

    @Override
    public ServerToken as(String alias) {
        return new ServerToken(DSL.name(alias), this);
    }

    @Override
    public ServerToken as(Name alias) {
        return new ServerToken(alias, this);
    }

    @Override
    public ServerToken as(Table<?> alias) {
        return new ServerToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerToken rename(String name) {
        return new ServerToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerToken rename(Name name) {
        return new ServerToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerToken rename(Table<?> name) {
        return new ServerToken(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerToken where(Condition condition) {
        return new ServerToken(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerToken where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerToken where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerToken where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerToken where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerToken where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerToken where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ServerToken where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerToken whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ServerToken whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
