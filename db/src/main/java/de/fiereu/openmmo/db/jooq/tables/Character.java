/*
 * This file is generated by jOOQ.
 */
package de.fiereu.openmmo.db.jooq.tables;


import de.fiereu.openmmo.db.jooq.Keys;
import de.fiereu.openmmo.db.jooq.Public;
import de.fiereu.openmmo.db.jooq.tables.OwnedItem.OwnedItemPath;
import de.fiereu.openmmo.db.jooq.tables.Pokemon.PokemonPath;
import de.fiereu.openmmo.db.jooq.tables.User.UserPath;
import de.fiereu.openmmo.db.jooq.tables.records.CharacterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Character extends TableImpl<CharacterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.character</code>
     */
    public static final Character CHARACTER = new Character();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharacterRecord> getRecordType() {
        return CharacterRecord.class;
    }

    /**
     * The column <code>public.character.id</code>.
     */
    public final TableField<CharacterRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.character.user_id</code>.
     */
    public final TableField<CharacterRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.character.name</code>.
     */
    public final TableField<CharacterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.character.forehead</code>.
     */
    public final TableField<CharacterRecord, Short> FOREHEAD = createField(DSL.name("forehead"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.forehead_color</code>.
     */
    public final TableField<CharacterRecord, Short> FOREHEAD_COLOR = createField(DSL.name("forehead_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.hat</code>.
     */
    public final TableField<CharacterRecord, Short> HAT = createField(DSL.name("hat"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.hat_color</code>.
     */
    public final TableField<CharacterRecord, Short> HAT_COLOR = createField(DSL.name("hat_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.hair</code>.
     */
    public final TableField<CharacterRecord, Short> HAIR = createField(DSL.name("hair"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.hair_color</code>.
     */
    public final TableField<CharacterRecord, Short> HAIR_COLOR = createField(DSL.name("hair_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.eyes</code>.
     */
    public final TableField<CharacterRecord, Short> EYES = createField(DSL.name("eyes"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.eyes_color</code>.
     */
    public final TableField<CharacterRecord, Short> EYES_COLOR = createField(DSL.name("eyes_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.facial_hair</code>.
     */
    public final TableField<CharacterRecord, Short> FACIAL_HAIR = createField(DSL.name("facial_hair"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.facial_hair_color</code>.
     */
    public final TableField<CharacterRecord, Short> FACIAL_HAIR_COLOR = createField(DSL.name("facial_hair_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.back</code>.
     */
    public final TableField<CharacterRecord, Short> BACK = createField(DSL.name("back"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.back_color</code>.
     */
    public final TableField<CharacterRecord, Short> BACK_COLOR = createField(DSL.name("back_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.top</code>.
     */
    public final TableField<CharacterRecord, Short> TOP = createField(DSL.name("top"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.top_color</code>.
     */
    public final TableField<CharacterRecord, Short> TOP_COLOR = createField(DSL.name("top_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.gloves</code>.
     */
    public final TableField<CharacterRecord, Short> GLOVES = createField(DSL.name("gloves"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.gloves_color</code>.
     */
    public final TableField<CharacterRecord, Short> GLOVES_COLOR = createField(DSL.name("gloves_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.footwear</code>.
     */
    public final TableField<CharacterRecord, Short> FOOTWEAR = createField(DSL.name("footwear"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.footwear_color</code>.
     */
    public final TableField<CharacterRecord, Short> FOOTWEAR_COLOR = createField(DSL.name("footwear_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.leggings</code>.
     */
    public final TableField<CharacterRecord, Short> LEGGINGS = createField(DSL.name("leggings"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.leggings_color</code>.
     */
    public final TableField<CharacterRecord, Short> LEGGINGS_COLOR = createField(DSL.name("leggings_color"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.fishing_rod</code>.
     */
    public final TableField<CharacterRecord, Short> FISHING_ROD = createField(DSL.name("fishing_rod"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.bike</code>.
     */
    public final TableField<CharacterRecord, Short> BIKE = createField(DSL.name("bike"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("'-1'::integer"), SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.character.created_at</code>.
     */
    public final TableField<CharacterRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Character(Name alias, Table<CharacterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Character(Name alias, Table<CharacterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.character</code> table reference
     */
    public Character(String alias) {
        this(DSL.name(alias), CHARACTER);
    }

    /**
     * Create an aliased <code>public.character</code> table reference
     */
    public Character(Name alias) {
        this(alias, CHARACTER);
    }

    /**
     * Create a <code>public.character</code> table reference
     */
    public Character() {
        this(DSL.name("character"), null);
    }

    public <O extends Record> Character(Table<O> path, ForeignKey<O, CharacterRecord> childPath, InverseForeignKey<O, CharacterRecord> parentPath) {
        super(path, childPath, parentPath, CHARACTER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CharacterPath extends Character implements Path<CharacterRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CharacterPath(Table<O> path, ForeignKey<O, CharacterRecord> childPath, InverseForeignKey<O, CharacterRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CharacterPath(Name alias, Table<CharacterRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CharacterPath as(String alias) {
            return new CharacterPath(DSL.name(alias), this);
        }

        @Override
        public CharacterPath as(Name alias) {
            return new CharacterPath(alias, this);
        }

        @Override
        public CharacterPath as(Table<?> alias) {
            return new CharacterPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CharacterRecord, Integer> getIdentity() {
        return (Identity<CharacterRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CharacterRecord> getPrimaryKey() {
        return Keys.CHARACTER_PKEY;
    }

    @Override
    public List<ForeignKey<CharacterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHARACTER__CHARACTER_USER_ID_FKEY);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.CHARACTER__CHARACTER_USER_ID_FKEY, null);

        return _user;
    }

    private transient OwnedItemPath _ownedItem;

    /**
     * Get the implicit to-many join path to the <code>public.owned_item</code>
     * table
     */
    public OwnedItemPath ownedItem() {
        if (_ownedItem == null)
            _ownedItem = new OwnedItemPath(this, null, Keys.OWNED_ITEM__OWNED_ITEM_OWNER_ID_FKEY.getInverseKey());

        return _ownedItem;
    }

    private transient PokemonPath _pokemonOriginalTrainerIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.pokemon</code>
     * table, via the <code>pokemon_original_trainer_id_fkey</code> key
     */
    public PokemonPath pokemonOriginalTrainerIdFkey() {
        if (_pokemonOriginalTrainerIdFkey == null)
            _pokemonOriginalTrainerIdFkey = new PokemonPath(this, null, Keys.POKEMON__POKEMON_ORIGINAL_TRAINER_ID_FKEY.getInverseKey());

        return _pokemonOriginalTrainerIdFkey;
    }

    private transient PokemonPath _pokemonTrainerIdFkey;

    /**
     * Get the implicit to-many join path to the <code>public.pokemon</code>
     * table, via the <code>pokemon_trainer_id_fkey</code> key
     */
    public PokemonPath pokemonTrainerIdFkey() {
        if (_pokemonTrainerIdFkey == null)
            _pokemonTrainerIdFkey = new PokemonPath(this, null, Keys.POKEMON__POKEMON_TRAINER_ID_FKEY.getInverseKey());

        return _pokemonTrainerIdFkey;
    }

    @Override
    public Character as(String alias) {
        return new Character(DSL.name(alias), this);
    }

    @Override
    public Character as(Name alias) {
        return new Character(alias, this);
    }

    @Override
    public Character as(Table<?> alias) {
        return new Character(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Character rename(String name) {
        return new Character(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Character rename(Name name) {
        return new Character(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Character rename(Table<?> name) {
        return new Character(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Character where(Condition condition) {
        return new Character(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Character where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Character where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Character where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Character where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Character where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Character where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Character where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Character whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Character whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
